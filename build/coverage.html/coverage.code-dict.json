{"/home/travis/build/npmtest/node-npmtest-mversion/test.js":"/* istanbul instrument in package npmtest_mversion */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mversion/lib.npmtest_mversion.js":"/* istanbul instrument in package npmtest_mversion */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mversion = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mversion = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mversion/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mversion && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mversion */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mversion\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mversion.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mversion.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mversion.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mversion.__dirname + '/lib.npmtest_mversion.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mversion/node_modules/mversion/index.js":"var semver = require('semver'),\n    path = require('path'),\n    through = require('through2'),\n    fs = require('vinyl-fs'),\n    fUtil = require('./lib/files'),\n    git = require('./lib/git');\n\nexports.get = function (callback) {\n  var result = fUtil.loadFiles();\n  var ret = {};\n  var errors = [];\n\n  return result\n    .on('data', function (file) {\n      try {\n        var contents = JSON.parse(file.contents.toString());\n        ret[path.basename(file.path)] = contents.version;\n      } catch (e) {\n        errors.push(file.relative + \": \" + e.message);\n      }\n    })\n    .on('end', function () {\n      if (errors.length) {\n        return callback(new Error(errors.join('\\n')), ret);\n      }\n      return callback(null, ret);\n    });\n};\n\nexports.isPackageFile = fUtil.isPackageFile;\n\nvar versionAliases = exports.versionAliases = {\n  \"pa\": \"patch\",\n  \"pr\": \"prerelease\",\n  \"ma\": \"major\",\n  \"mi\": \"minor\",\n  // one char might be controversial, but it saves key strokes\n  \"m\": \"major\",\n  \"p\": \"patch\",\n  \"i\": \"minor\"\n};\n\nvar updateJSON = exports.updateJSON = function (obj, ver) {\n  ver = ver.toString().toLowerCase();\n\n  // check for aliases\n  if(ver in versionAliases){\n    ver = versionAliases[ver];\n  }\n\n  var validVer = semver.valid(ver);\n  obj = obj || {};\n  var currentVer = obj.version;\n\n  if (validVer === null) {\n    validVer = semver.inc(currentVer, ver);\n  }\n\n  if (validVer === null) {\n    return false;\n  }\n\n  obj.version = validVer;\n  return obj;\n};\n\nexports.update = function (options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  if (typeof options === \"string\") {\n    options = {\n      version: options,\n      noPrefix: false,\n      precommit: void 0,\n      commitMessage: void 0\n    };\n  }\n\n  if (!options.tagName) {\n    options.tagName = (options.noPrefix ? '' : 'v') + '%s';\n  }\n\n  var ver = options.version || 'minor';\n  var noPrefix = !!options.noPrefix;\n  var commitMessage = options.commitMessage || void 0;\n  var precommitCallback = options.precommit;\n  callback = callback || noop();\n\n  (function (done) {\n    if (commitMessage) {\n      return git.isRepositoryClean(done);\n    }\n    return done(null);\n  })(function(err) {\n    if (err) {\n      callback(err);\n      return void 0;\n    }\n\n    var files = [],\n        errors = [],\n        fileStream = fUtil.loadFiles(),\n        versionList = {},\n        updated = null,\n        hasSet = false;\n\n    var stored = fileStream.pipe(through.obj(function(file, e, next) {\n      if (file == null || file.isNull()) {\n        this.push(null);\n        next();\n        return;\n      }\n      var json = file.contents.toString(),\n          contents = null;\n\n      try {\n        contents = JSON.parse(json);\n      } catch (e) {\n        errors.push(new Error(file.relative + ': ' + e.message));\n        next();\n        return;\n      }\n\n      if (!hasSet) {\n        hasSet = true;\n        updated = updateJSON(contents, ver);\n\n        if (!updated) {\n          this.emit('error', new Error('Version bump failed, ' + ver + ' is not valid version.'))\n          return void 0;\n        }\n      }\n\n      contents.version = updated.version;\n      file.contents = new Buffer(JSON.stringify(contents, null, fUtil.space(json)) + fUtil.getLastChar(json));\n      versionList[path.basename(file.path)] = updated.version;\n\n      this.push(file);\n      next();\n    }))\n    .on('error', function (err) {\n      callback(err);\n    })\n    .pipe(fs.dest('./'));\n\n    stored.on('data', function (file) {\n      files.push(file.path);\n    });\n\n    stored.on('end', function () {\n      var errorMessage = null;\n      if (errors.length) {\n        errorMessage = errors.map(function (e) {\n          return \" * \" + e.message;\n        }).join('\\n');\n      }\n\n      updated = updated || { version: 'N/A' };\n\n      var ret = {\n        newVersion: updated.version,\n        versions: versionList,\n        message: files.map(function (file) {\n          return 'Updated ' + path.basename(file);\n        }).join('\\n'),\n        updatedFiles: files\n      };\n\n      if (!commitMessage || errorMessage) {\n        callback(errorMessage ? new Error(errorMessage) : null, ret);\n        return void 0;\n      }\n\n      if (!precommitCallback) {\n        return doCommit();\n      }\n\n      precommitCallback(function (err) {\n        if (err) {\n          return git.checkout();\n        }\n        doCommit();\n      });\n\n      function doCommit () {\n        var tagName = options.tagName.replace('%s', updated.version).replace('\"', '').replace(\"'\", '');\n        git.commit(files, commitMessage, updated.version, tagName, function (err) {\n          if (err) {\n            callback(err, null);\n            return void 0;\n          }\n\n          ret.message += '\\nCommited to git and created tag ' + tagName;\n          callback(null, ret);\n        });\n      }\n    });\n  });\n  return this;\n};\n\n\n\nfunction noop () {\n  return function () { };\n}\n","/home/travis/build/npmtest/node-npmtest-mversion/node_modules/mversion/lib/files.js":"var minimatch = require('minimatch');\nvar fs = require('vinyl-fs');\nvar rc = require('rc');\n\nexports._files = [\n  'package.json',\n  'npm-shrinkwrap.json',\n  '*.jquery.json',\n  'component.json',\n  'bower.json',\n  'manifest.json',\n  'composer.json'\n];\n\nmodule.exports.loadFiles = function () {\n  return fs.src(exports._files);\n};\n\nmodule.exports.getRC = function () {\n  return rc('mversion');\n};\n\nmodule.exports.isPackageFile = function (file) {\n  for (var i = 0; i < exports._files.length; i++) {\n    if (minimatch(file, exports._files[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Preserver new line at the end of a file\nmodule.exports.getLastChar = function (json) {\n  return (json.slice(-1) === '\\n') ? '\\n' : '';\n};\n\n// Figured out which \"space\" params to be used for JSON.stringfiy.\nmodule.exports.space = function (json) {\n    var match = json.match(/^(?:(\\t+)|( +))\"/m);\n    return match ? (match[1] ? '\\t' : match[2].length) : ''\n};","/home/travis/build/npmtest/node-npmtest-mversion/node_modules/mversion/lib/git.js":"var contra = require('contra'),\n    path = require('path'),\n    fUtils = require('./files'),\n    cp = require('child_process');\n\nvar gitApp = 'git', gitExtra = { env: process.env };\n\n\nvar escapeQuotes = function (str) {\n  if (typeof str === 'string') {\n    return str.replace(/([\"$`\\\\])/g, '\\\\$1');\n  } else {\n    return str;\n  }\n};\n\n\nmodule.exports.isRepositoryClean = function (callback) {\n  cp.exec(gitApp + ' ' + [ 'status', '--porcelain' ].join(' '), gitExtra, function (er, stdout, stderr) {\n    // makeCommit parly inspired and taken from NPM version module\n    var lines = stdout.trim().split('\\n').filter(function (line) {\n      var file = path.basename(line.replace(/.{1,2}\\s+/, ''));\n      return line.trim() && !line.match(/^\\?\\? /) && !fUtils.isPackageFile(line);\n    }).map(function (line) {\n      return line.trim()\n    });\n\n    if (lines.length) {\n      return callback(new Error('Git working directory not clean.\\n'+lines.join('\\n')));\n    }\n    return callback();\n  });\n};\n\nmodule.exports.checkout = function (callback) {\n  cp.exec(gitApp + ' checkout -- .', gitExtra, callback);\n};\n\nmodule.exports.commit = function (files, message, newVer, tagName, callback) {\n  message = message.replace('%s', newVer).replace('\"', '').replace(\"'\", '');\n  files = files.map(function (file) {\n    return '\"' + escapeQuotes(file) + '\"';\n  }).join(' ');\n  var functionSeries = [\n    function (done) {\n      cp.exec(gitApp + ' add ' + files, gitExtra, done);\n    },\n\n    function (done) {\n      cp.exec([gitApp, 'commit', '-m', '\"' + message + '\"'].join(' '), gitExtra, done);\n    },\n\n    function (done) {\n      cp.exec(\n        [\n          gitApp, 'tag', '-a', tagName, '-m', '\"' + message + '\"'\n        ].join(' '),\n        gitExtra, done\n      );\n    }\n  ];\n  contra.series(functionSeries, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-mversion/node_modules/mversion/bin/cli.js":"var chalk = require('chalk'),\n    path = require('path'),\n    files = require('../lib/files'),\n    scripts = require('../lib/scripts'),\n    mversion = require('../'),\n    thisVersion = require('../package.json').version,\n    usage = require('cli-usage');\n\nusage(path.resolve(__dirname, '../usage.md'));\n\nvar defaultMessage = \"v%s\";\n\nmodule.exports = function (argv, loggers, processCallback) {\n  if (typeof loggers === 'function' || !loggers) {\n    processCallback = loggers;\n    loggers = {};\n  }\n  var logger = loggers.logger || console.log.bind(console);\n  var errorLogger = loggers.errorLogger || console.error.bind(console);\n\n  var rc = files.getRC();\n\n  processCallback = processCallback || function () { };\n\n  var parsedArguments = require('minimist')(argv, {\n    'string': ['t', 'tag'],\n    'boolean': ['n']\n  });\n\n  if (argv.length === 0) {\n    return get();\n  }\n\n  if (!rc.scripts || !rc.scripts.preupdate) {\n    return update();\n  }\n\n  return scripts.run(\n    rc.scripts.preupdate,\n    scriptsCallback('preupdate', update)\n  );\n\n  function get() {\n    mversion.get(function (err, data) {\n      if (err) {\n        errorLogger(chalk.red(err.message));\n      }\n\n      for(file in data) {\n        if (data[file]) {\n          logger(chalk.green(file) + ': ' + chalk.yellow(data[file]));\n        }\n      }\n\n      processCallback(err);\n    });\n  }\n\n  function update () {\n    var updateOptions = rc || {};\n    updateOptions.version = parsedArguments._[0];\n    updateOptions.noPrefix = !!parsedArguments.n || parsedArguments.prefix === false || !!updateOptions.noPrefix;\n\n    if (isArgumentPassed('v', 'version')) {\n      logger('mversion v' + thisVersion);\n      return processCallback();\n    }\n\n    // Check for git:\n    if (isArgumentPassed('m')) {\n      updateOptions.commitMessage =\n        parsedArguments.m === true\n          ? defaultMessage\n          : parsedArguments.m;\n    }\n\n    // Check for overriding tag name\n    if (isArgumentPassed('t', 'tag')) {\n      updateOptions.tagName = parsedArguments.t || parsedArguments.tag;\n    }\n\n    if (updateOptions.commitMessage && rc.scripts && rc.scripts.precommit) {\n      updateOptions.precommit = function (errorCb) {\n        scripts.run(rc.scripts.precommit, scriptsCallback('precommit', errorCb));\n      };\n    }\n\n    mversion.update(updateOptions, function (err, data) {\n      if (err) {\n        errorLogger(chalk.red('Failed updating:'));\n\n        if (!data) {\n          errorLogger(err.message);\n        } else {\n          errorLogger(constructError(\n            err.message,\n            data.updatedFiles,\n            updateOptions.commitMessage,\n            updateOptions.noPrefix,\n            data.newVersion\n          ));\n        }\n        return processCallback(err);\n      }\n\n      if (data && data.newVersion) {\n        logger(chalk.green('Updated to new version: ') + chalk.yellow('v' + data.newVersion));\n        logger(data.message);\n      }\n\n      if (!rc.scripts || (!rc.scripts.postcommit && !rc.scripts.postupdate)) {\n        return processCallback();\n      }\n\n      if (rc.scripts.postcommit && updateOptions.commitMessage) {\n        scripts.run(\n          rc.scripts.postcommit.replace('%s', data.newVersion),\n          scriptsCallback('postcommit', runPostUpdate)\n        );\n      }else{\n        return runPostUpdate();\n      }\n\n      function runPostUpdate() {\n        if (!rc.scripts.postupdate) return processCallback();\n        scripts.run(\n          rc.scripts.postupdate.replace('%s', data.newVersion),\n          scriptsCallback('postupdate', processCallback)\n        );\n      }\n    });\n  }\n\n  function isArgumentPassed () {\n    var args = Array.prototype.slice.apply(arguments);\n    for(var i = 0, len = args.length; i < len; i++) {\n      if (!!parsedArguments[args[i]]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function scriptsCallback (scriptType, cb) {\n    cb = cb || function () {};\n    return function (err, stdout) {\n      if (err) {\n        errorLogger(chalk.red('Error running ' + scriptType + ':'), err.message);\n        errorLogger(chalk.red('Stopping execution'));\n        cb(err);\n        return processCallback();\n      }\n\n      var str = stdout.toString('utf8');\n      if (str) {\n        logger(chalk.green('Output running ' + scriptType + ':'), str);\n      }\n      cb();\n    };\n  }\n};\n\nfunction constructError (errors, files, commitMessage, isNoPrefix, updatedVersion) {\n  var commitFlag = commitMessage ? '-m \"' + commitMessage + '\"' : '';\n  var noPrefixFlag = isNoPrefix ? '--no-prefix' : '';\n\n  var ret = 'Some files contains errors:\\n';\n\n  ret += chalk.red(errors);\n\n  if (files && files.length) {\n    ret += '\\n\\nOther files (' + files.map(function (file) {\n          return chalk.green(path.basename(file));\n        }).join(', ') + ') got updated to version ' + chalk.yellow('v' + updatedVersion) + '.\\n\\n';\n  }\n\n  if (!!commitMessage) {\n    ret += '\\nThe changes were not commited, as there were errors.\\n';\n  }\n\n  ret += 'Fix erros and try again to synchronize:\\n';\n  ret += chalk.bold(chalk.yellow(['$ mversion', updatedVersion, commitFlag, noPrefixFlag].join(' ')));\n  return ret;\n}\n","/home/travis/build/npmtest/node-npmtest-mversion/node_modules/mversion/lib/scripts.js":"var exec = require('child_process').exec;\n\nmodule.exports.run = function (script, cb) {\n  return exec(script, {\n    cwd: process.cwd()\n  }, cb);\n};"}